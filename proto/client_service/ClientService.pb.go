// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: proto/ClientService.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tipo        int64  `protobuf:"varint,1,opt,name=tipo,proto3" json:"tipo,omitempty"`    //0- Subir archivo  1.- Bajar Archivo
	Nombre      string `protobuf:"bytes,2,opt,name=nombre,proto3" json:"nombre,omitempty"` // Nombre del Archivo
	Totalchunks int64  `protobuf:"varint,3,opt,name=totalchunks,proto3" json:"totalchunks,omitempty"`
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ClientService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ClientService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_proto_ClientService_proto_rawDescGZIP(), []int{0}
}

func (x *UploadRequest) GetTipo() int64 {
	if x != nil {
		return x.Tipo
	}
	return 0
}

func (x *UploadRequest) GetNombre() string {
	if x != nil {
		return x.Nombre
	}
	return ""
}

func (x *UploadRequest) GetTotalchunks() int64 {
	if x != nil {
		return x.Totalchunks
	}
	return 0
}

type UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp int64 `protobuf:"varint,1,opt,name=resp,proto3" json:"resp,omitempty"` //0.- Disponible   1.-cualquier otra wea
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ClientService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ClientService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_proto_ClientService_proto_rawDescGZIP(), []int{1}
}

func (x *UploadResponse) GetResp() int64 {
	if x != nil {
		return x.Resp
	}
	return 0
}

type UploadChunksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *UploadChunksRequest) Reset() {
	*x = UploadChunksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ClientService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChunksRequest) ProtoMessage() {}

func (x *UploadChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ClientService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChunksRequest.ProtoReflect.Descriptor instead.
func (*UploadChunksRequest) Descriptor() ([]byte, []int) {
	return file_proto_ClientService_proto_rawDescGZIP(), []int{2}
}

func (x *UploadChunksRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type UploadChunksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp string `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *UploadChunksResponse) Reset() {
	*x = UploadChunksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ClientService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChunksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChunksResponse) ProtoMessage() {}

func (x *UploadChunksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ClientService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChunksResponse.ProtoReflect.Descriptor instead.
func (*UploadChunksResponse) Descriptor() ([]byte, []int) {
	return file_proto_ClientService_proto_rawDescGZIP(), []int{3}
}

func (x *UploadChunksResponse) GetResp() string {
	if x != nil {
		return x.Resp
	}
	return ""
}

type DownloadNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req string `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
}

func (x *DownloadNamesRequest) Reset() {
	*x = DownloadNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ClientService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadNamesRequest) ProtoMessage() {}

func (x *DownloadNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ClientService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadNamesRequest.ProtoReflect.Descriptor instead.
func (*DownloadNamesRequest) Descriptor() ([]byte, []int) {
	return file_proto_ClientService_proto_rawDescGZIP(), []int{4}
}

func (x *DownloadNamesRequest) GetReq() string {
	if x != nil {
		return x.Req
	}
	return ""
}

type DownloadNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *DownloadNamesResponse) Reset() {
	*x = DownloadNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ClientService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadNamesResponse) ProtoMessage() {}

func (x *DownloadNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ClientService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadNamesResponse.ProtoReflect.Descriptor instead.
func (*DownloadNamesResponse) Descriptor() ([]byte, []int) {
	return file_proto_ClientService_proto_rawDescGZIP(), []int{5}
}

func (x *DownloadNamesResponse) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type DownloadChunksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DownloadChunksRequest) Reset() {
	*x = DownloadChunksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ClientService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadChunksRequest) ProtoMessage() {}

func (x *DownloadChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ClientService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadChunksRequest.ProtoReflect.Descriptor instead.
func (*DownloadChunksRequest) Descriptor() ([]byte, []int) {
	return file_proto_ClientService_proto_rawDescGZIP(), []int{6}
}

func (x *DownloadChunksRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DownloadChunksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prop []int64 `protobuf:"varint,1,rep,packed,name=prop,proto3" json:"prop,omitempty"`
}

func (x *DownloadChunksResponse) Reset() {
	*x = DownloadChunksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ClientService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadChunksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadChunksResponse) ProtoMessage() {}

func (x *DownloadChunksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ClientService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadChunksResponse.ProtoReflect.Descriptor instead.
func (*DownloadChunksResponse) Descriptor() ([]byte, []int) {
	return file_proto_ClientService_proto_rawDescGZIP(), []int{7}
}

func (x *DownloadChunksResponse) GetProp() []int64 {
	if x != nil {
		return x.Prop
	}
	return nil
}

var File_proto_ClientService_proto protoreflect.FileDescriptor

var file_proto_ClientService_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x0d, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x70, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0x24, 0x0a, 0x0e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70,
	0x22, 0x2b, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x2a, 0x0a,
	0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x28, 0x0a, 0x14, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x65, 0x71, 0x22, 0x2d, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x2c, 0x0a, 0x16, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x32, 0xfa, 0x02,
	0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x49, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x16, 0x5a, 0x14, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_ClientService_proto_rawDescOnce sync.Once
	file_proto_ClientService_proto_rawDescData = file_proto_ClientService_proto_rawDesc
)

func file_proto_ClientService_proto_rawDescGZIP() []byte {
	file_proto_ClientService_proto_rawDescOnce.Do(func() {
		file_proto_ClientService_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_ClientService_proto_rawDescData)
	})
	return file_proto_ClientService_proto_rawDescData
}

var file_proto_ClientService_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_ClientService_proto_goTypes = []interface{}{
	(*UploadRequest)(nil),          // 0: client_service.UploadRequest
	(*UploadResponse)(nil),         // 1: client_service.UploadResponse
	(*UploadChunksRequest)(nil),    // 2: client_service.UploadChunksRequest
	(*UploadChunksResponse)(nil),   // 3: client_service.UploadChunksResponse
	(*DownloadNamesRequest)(nil),   // 4: client_service.DownloadNamesRequest
	(*DownloadNamesResponse)(nil),  // 5: client_service.DownloadNamesResponse
	(*DownloadChunksRequest)(nil),  // 6: client_service.DownloadChunksRequest
	(*DownloadChunksResponse)(nil), // 7: client_service.DownloadChunksResponse
}
var file_proto_ClientService_proto_depIdxs = []int32{
	0, // 0: client_service.ClientService.Upload:input_type -> client_service.UploadRequest
	2, // 1: client_service.ClientService.UploadChunks:input_type -> client_service.UploadChunksRequest
	4, // 2: client_service.ClientService.DownloadNames:input_type -> client_service.DownloadNamesRequest
	6, // 3: client_service.ClientService.DownloadChunks:input_type -> client_service.DownloadChunksRequest
	1, // 4: client_service.ClientService.Upload:output_type -> client_service.UploadResponse
	3, // 5: client_service.ClientService.UploadChunks:output_type -> client_service.UploadChunksResponse
	5, // 6: client_service.ClientService.DownloadNames:output_type -> client_service.DownloadNamesResponse
	7, // 7: client_service.ClientService.DownloadChunks:output_type -> client_service.DownloadChunksResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_ClientService_proto_init() }
func file_proto_ClientService_proto_init() {
	if File_proto_ClientService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_ClientService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ClientService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ClientService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChunksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ClientService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChunksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ClientService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ClientService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ClientService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadChunksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ClientService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadChunksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_ClientService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_ClientService_proto_goTypes,
		DependencyIndexes: file_proto_ClientService_proto_depIdxs,
		MessageInfos:      file_proto_ClientService_proto_msgTypes,
	}.Build()
	File_proto_ClientService_proto = out.File
	file_proto_ClientService_proto_rawDesc = nil
	file_proto_ClientService_proto_goTypes = nil
	file_proto_ClientService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientServiceClient interface {
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
	UploadChunks(ctx context.Context, in *UploadChunksRequest, opts ...grpc.CallOption) (*UploadChunksResponse, error)
	DownloadNames(ctx context.Context, in *DownloadNamesRequest, opts ...grpc.CallOption) (*DownloadNamesResponse, error)
	DownloadChunks(ctx context.Context, in *DownloadChunksRequest, opts ...grpc.CallOption) (*DownloadChunksResponse, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/client_service.ClientService/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) UploadChunks(ctx context.Context, in *UploadChunksRequest, opts ...grpc.CallOption) (*UploadChunksResponse, error) {
	out := new(UploadChunksResponse)
	err := c.cc.Invoke(ctx, "/client_service.ClientService/UploadChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) DownloadNames(ctx context.Context, in *DownloadNamesRequest, opts ...grpc.CallOption) (*DownloadNamesResponse, error) {
	out := new(DownloadNamesResponse)
	err := c.cc.Invoke(ctx, "/client_service.ClientService/DownloadNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) DownloadChunks(ctx context.Context, in *DownloadChunksRequest, opts ...grpc.CallOption) (*DownloadChunksResponse, error) {
	out := new(DownloadChunksResponse)
	err := c.cc.Invoke(ctx, "/client_service.ClientService/DownloadChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceServer is the server API for ClientService service.
type ClientServiceServer interface {
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	UploadChunks(context.Context, *UploadChunksRequest) (*UploadChunksResponse, error)
	DownloadNames(context.Context, *DownloadNamesRequest) (*DownloadNamesResponse, error)
	DownloadChunks(context.Context, *DownloadChunksRequest) (*DownloadChunksResponse, error)
}

// UnimplementedClientServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClientServiceServer struct {
}

func (*UnimplementedClientServiceServer) Upload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedClientServiceServer) UploadChunks(context.Context, *UploadChunksRequest) (*UploadChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadChunks not implemented")
}
func (*UnimplementedClientServiceServer) DownloadNames(context.Context, *DownloadNamesRequest) (*DownloadNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadNames not implemented")
}
func (*UnimplementedClientServiceServer) DownloadChunks(context.Context, *DownloadChunksRequest) (*DownloadChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadChunks not implemented")
}

func RegisterClientServiceServer(s *grpc.Server, srv ClientServiceServer) {
	s.RegisterService(&_ClientService_serviceDesc, srv)
}

func _ClientService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_service.ClientService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_UploadChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).UploadChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_service.ClientService/UploadChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).UploadChunks(ctx, req.(*UploadChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_DownloadNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).DownloadNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_service.ClientService/DownloadNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).DownloadNames(ctx, req.(*DownloadNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_DownloadChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).DownloadChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_service.ClientService/DownloadChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).DownloadChunks(ctx, req.(*DownloadChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "client_service.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _ClientService_Upload_Handler,
		},
		{
			MethodName: "UploadChunks",
			Handler:    _ClientService_UploadChunks_Handler,
		},
		{
			MethodName: "DownloadNames",
			Handler:    _ClientService_DownloadNames_Handler,
		},
		{
			MethodName: "DownloadChunks",
			Handler:    _ClientService_DownloadChunks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ClientService.proto",
}
